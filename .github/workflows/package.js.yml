name: Package builds

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  build:
    runs-on: windows-latest
    permissions: 
      id-token: write
    steps:
      # Checkout & install haxe
      - uses: actions/checkout@v2

      - name: Restore cached haxe installation
        id: restore-haxe
        uses: actions/cache/restore@v4
        with:
          path: |
            C:/hostedtoolcache/windows/haxe
          key: ${{ runner.os }}-${{ hashFiles('setup.hxml') }}
      
      - uses: krdlab/setup-haxe@v1
        # if: steps.restore-haxe.outputs.cache-hit != 'true'
        with:
          haxe-version: 4.3.3
      - run: haxe -version

      # Install libs if cache not found
      - run: haxe setup.hxml
        if: steps.restore-haxe.outputs.cache-hit != 'true'

      - run: haxelib list

      - name: Save haxe cache
        id: save-haxe
        uses: actions/cache/save@v4
        with:
          path: |
            C:/hostedtoolcache/windows/haxe
          key: ${{ steps.restore-haxe.outputs.cache-primary-key }}

      # Run build
      # - run: haxe build.js.hxml

      # - uses: cedx/setup-hashlink@v6
      #   with:
      #     version: =latest

      - uses: robinraju/release-downloader@v1
        id: download-hl
        with:
          repository: 'HaxeFoundation/hashlink'
          latest: true
          preRelease: true
          tag: latest
          fileName: '*-win64.zip'
          extract: true
          out-file-path: hashlink
      - name: Split filename
        id: split
        uses: xom9ikk/split@v1 
        with:
          string: ${{fromJson(steps.download-hl.outputs.downloaded_files)[0]}}
          separator: .zip
          limit: -1
      - run: |
          echo "Hashlink version: ${{ steps.split.outputs._0 }}"
          tree ${{ steps.split.outputs._0 }}
      - run: Copy-Item -Path ${{ steps.split.outputs._0 }} -Destination C:/hostedtoolcache/windows/hashlink -Recurse
      - run: Add-Content $env:GITHUB_PATH "C:/hostedtoolcache/windows/hashlink"

      - name: Copy VC redist DLL to build output
        run: cp msvcr120.dll "C:/hostedtoolcache/windows/haxe/4.3.3/x64/lib/redistHelper/0,7,6/redistFiles/hl64/"

      - name: Package project
        run: haxelib run redistHelper build.js.hxml build.directx.hxml build.opengl.hxml -o redist -p casiland -zip
        
      - name: Upload JS build files as pages artifact
        id: deployment
        uses: actions/upload-pages-artifact@v3 # or specific "vX.X.X" version tag for this action
        with:
          path: redist/js
          
      - name: Upload JS build files alone
        uses: actions/upload-artifact@v4
        with:
          name: js
          path: redist/js.zip
      
      - name: Upload directX platform build files
        uses: actions/upload-artifact@v4
        with:
          name: win-dx
          path: redist/casiland_directx.zip
      
      - name: Upload opengl platform build files
        uses: actions/upload-artifact@v4
        with:
          name: win-gl
          path: redist/casiland_opengl_win.zip
      
      
      - name: Package DEVELOPMENT builds
        run: haxelib run redistHelper build.dev.dx.hxml build.dev.gl.hxml res -o redist -p casiland-DEVELOPMENT -zip
      
      - name: Upload directX DEVELOPMENT build files
        uses: actions/upload-artifact@v4
        with:
          name: win-dev-dx
          path: redist/casiland-DEVELOPMENT_directx.zip
      
      - name: Upload opengl DEVELOPMENT build files
        uses: actions/upload-artifact@v4
        with:
          name: win-dev-gl
          path: redist/casiland-DEVELOPMENT_opengl_win.zip
        
      
  deploy:
    permissions:
      id-token: write
      pages: write
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
  
  publish:
    permissions:
      id-token: write
      contents: write
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download directX platform build files
        uses: actions/download-artifact@v4
        with:
          name: win-dx
      
      - name: Download opengl platform build files
        uses: actions/download-artifact@v4
        with:
          name: win-gl
      
      - name: Download directX DEVELOPMENT platform build files
        uses: actions/download-artifact@v4
        with:
          name: win-dev-dx
      
      - name: Download opengl DEVELOPMENT platform build files
        uses: actions/download-artifact@v4
        with:
          name: win-dev-gl
      
      - name: Download JS platform build files
        uses: actions/download-artifact@v4
        with:
          name: js
      
      - name: Upload other platform builds
        uses: softprops/action-gh-release@v2
        with:
          name: Nigthly Build
          tag_name: nightly
          files: |
            casiland_directx.zip
            casiland_opengl_win.zip
            casiland-DEVELOPMENT_directx.zip
            casiland-DEVELOPMENT_opengl_win.zip
            js.zip
          prerelease: true
